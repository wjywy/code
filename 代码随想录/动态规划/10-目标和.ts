/**
 * 给定一个非负整数数组，a1,a2,......an,和一个目标数，S。现在你有两个符号+和-。对于数组中的任意一个整数，你都可以从+或-中选择一个符号添加在前面
 * 返回可以使最终数组和为目标数S的所有添加符号的方法数
 * 1. 初始化dp数组
 *    dp[i][j]:从下标1-i的元素中任意取，放入容量为j的背包，表示所有添加符号的方法数
 * 2. 确定dp数组的推导公式
 *    dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i])
 * 3. 确定dp数组的初始值
 *    dp[i][0]:
 *    dp[0][j]:
 * 4. 确定dp数组的遍历方式
 *
 * 5. 举例推导dp数组
 *
 * 关键：如何转换为01背包模型
 */

// const toSum = (nums: number[], S: number): number => {};
// toSum([1, 1, 1, 1, 1], 3);
